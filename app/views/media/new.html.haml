.max-width-4.mx-auto.p2
  %h1.barrio 
    Add media for 
    %span.orange= @spot.name
  %h2.barrio Rules
  %ul
    %li Uploaded media must be for this spot
    %li The following media types are allowed: JPG/JPEG, PNG, GIF

  = simple_form_for [@spot, @medium], html: {class: 'directUpload', data: { 'form-data' => (@s3_direct_post.fields), 'url' => @s3_direct_post.url, 'host' => URI.parse(@s3_direct_post.url).host }} do |f|
    = file_field_tag "file"
    = f.submit "Add media", class: "btn btn-primary"

= content_for(:after_js) do
  :javascript
    $(document).ready(function() {
      $submit = $('input[type=submit]');

      $submit.on('click', function(e){
        e.preventDefault();

        if($("input:file").val() == ""){
          alert('Please choose a file!');
        }
        else {
          $('form').submit();
        }
      });

      $(function() {
        $('.directUpload').find("input:file").each(function(i, elem) {

          var fileInput    = $(elem);
          var form         = $(fileInput.parents('form:first'));
          var submitButton = form.find('input[type="submit"]');
          var progressBar  = $("<div class='bar'></div>");
          var barContainer = $("<div class='progress'></div>").append(progressBar);

          fileInput.after(barContainer);

          fileInput.fileupload({
            add: function(e, data) {
              var uploadErrors = [];
              var acceptFileTypes = /^image\/(gif|jpe?g|png)$/i;
              if(data.originalFiles[0]['type'].length && !acceptFileTypes.test(data.originalFiles[0]['type'])) {
                  uploadErrors.push('Not an accepted file type');
              }
              if(data.originalFiles[0]['size'].length && data.originalFiles[0]['size'] > 5000000) {
                  uploadErrors.push('Filesize is too big');
              }
              if(uploadErrors.length > 0) {
                  alert(uploadErrors.join("\n"));
                  fileInput.val("");
              } else {
                  data.submit();
              }
            },
            fileInput:       fileInput,
            url:             form.data('url'),
            type:            'POST',
            autoUpload:       true,
            formData:         form.data('form-data'),
            paramName:        'file', // S3 does not like nested name fields i.e. name="user[avatar_url]"
            dataType:         'XML',  // S3 returns XML if success_action_status is set to 201
            replaceFileInput: false,
            progressall: function (e, data) {
              var progress = parseInt(data.loaded / data.total * 100, 10);
              progressBar.css('width', progress + '%')
            },
            start: function (e) {
              submitButton.prop('disabled', true);

              progressBar.
              css('background', 'green').
              css('display', 'block').
              css('width', '0%').
              text("Loading...");
            },
            done: function(e, data) {
              submitButton.prop('disabled', false);
              progressBar.text("Uploading done");

              // extract key and generate URL from response
              var key   = $(data.jqXHR.responseXML).find("Key").text();
              var url   = '//' + form.data('host') + '/' + key;
          
              // create hidden field
              var input = $("<input />", { type:'hidden', name: fileInput.attr('name'), value: url })
              form.append(input);
            },
            fail: function(e, data) {
              submitButton.prop('disabled', false);
              progressBar.css("background", "red").text("Failed");
            }
          });
        });
      });
    });